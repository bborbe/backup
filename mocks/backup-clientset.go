// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	v1 "github.com/bborbe/backup/k8s/client/clientset/versioned/typed/backup.benjamin-borbe.de/v1"
	"github.com/bborbe/backup/pkg"
	"k8s.io/client-go/discovery"
)

type BackupClientset struct {
	BackupV1Stub        func() v1.BackupV1Interface
	backupV1Mutex       sync.RWMutex
	backupV1ArgsForCall []struct {
	}
	backupV1Returns struct {
		result1 v1.BackupV1Interface
	}
	backupV1ReturnsOnCall map[int]struct {
		result1 v1.BackupV1Interface
	}
	DiscoveryStub        func() discovery.DiscoveryInterface
	discoveryMutex       sync.RWMutex
	discoveryArgsForCall []struct {
	}
	discoveryReturns struct {
		result1 discovery.DiscoveryInterface
	}
	discoveryReturnsOnCall map[int]struct {
		result1 discovery.DiscoveryInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BackupClientset) BackupV1() v1.BackupV1Interface {
	fake.backupV1Mutex.Lock()
	ret, specificReturn := fake.backupV1ReturnsOnCall[len(fake.backupV1ArgsForCall)]
	fake.backupV1ArgsForCall = append(fake.backupV1ArgsForCall, struct {
	}{})
	stub := fake.BackupV1Stub
	fakeReturns := fake.backupV1Returns
	fake.recordInvocation("BackupV1", []interface{}{})
	fake.backupV1Mutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BackupClientset) BackupV1CallCount() int {
	fake.backupV1Mutex.RLock()
	defer fake.backupV1Mutex.RUnlock()
	return len(fake.backupV1ArgsForCall)
}

func (fake *BackupClientset) BackupV1Calls(stub func() v1.BackupV1Interface) {
	fake.backupV1Mutex.Lock()
	defer fake.backupV1Mutex.Unlock()
	fake.BackupV1Stub = stub
}

func (fake *BackupClientset) BackupV1Returns(result1 v1.BackupV1Interface) {
	fake.backupV1Mutex.Lock()
	defer fake.backupV1Mutex.Unlock()
	fake.BackupV1Stub = nil
	fake.backupV1Returns = struct {
		result1 v1.BackupV1Interface
	}{result1}
}

func (fake *BackupClientset) BackupV1ReturnsOnCall(i int, result1 v1.BackupV1Interface) {
	fake.backupV1Mutex.Lock()
	defer fake.backupV1Mutex.Unlock()
	fake.BackupV1Stub = nil
	if fake.backupV1ReturnsOnCall == nil {
		fake.backupV1ReturnsOnCall = make(map[int]struct {
			result1 v1.BackupV1Interface
		})
	}
	fake.backupV1ReturnsOnCall[i] = struct {
		result1 v1.BackupV1Interface
	}{result1}
}

func (fake *BackupClientset) Discovery() discovery.DiscoveryInterface {
	fake.discoveryMutex.Lock()
	ret, specificReturn := fake.discoveryReturnsOnCall[len(fake.discoveryArgsForCall)]
	fake.discoveryArgsForCall = append(fake.discoveryArgsForCall, struct {
	}{})
	stub := fake.DiscoveryStub
	fakeReturns := fake.discoveryReturns
	fake.recordInvocation("Discovery", []interface{}{})
	fake.discoveryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BackupClientset) DiscoveryCallCount() int {
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return len(fake.discoveryArgsForCall)
}

func (fake *BackupClientset) DiscoveryCalls(stub func() discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = stub
}

func (fake *BackupClientset) DiscoveryReturns(result1 discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = nil
	fake.discoveryReturns = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *BackupClientset) DiscoveryReturnsOnCall(i int, result1 discovery.DiscoveryInterface) {
	fake.discoveryMutex.Lock()
	defer fake.discoveryMutex.Unlock()
	fake.DiscoveryStub = nil
	if fake.discoveryReturnsOnCall == nil {
		fake.discoveryReturnsOnCall = make(map[int]struct {
			result1 discovery.DiscoveryInterface
		})
	}
	fake.discoveryReturnsOnCall[i] = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *BackupClientset) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BackupClientset) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.BackupClientset = new(BackupClientset)
