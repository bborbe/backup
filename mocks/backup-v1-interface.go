// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	v1 "github.com/bborbe/backup/k8s/client/clientset/versioned/typed/backup.benjamin-borbe.de/v1"
	"github.com/bborbe/backup/pkg"
	"k8s.io/client-go/rest"
)

type BackupV1Interface struct {
	RESTClientStub        func() rest.Interface
	rESTClientMutex       sync.RWMutex
	rESTClientArgsForCall []struct {
	}
	rESTClientReturns struct {
		result1 rest.Interface
	}
	rESTClientReturnsOnCall map[int]struct {
		result1 rest.Interface
	}
	TargetsStub        func(string) v1.TargetInterface
	targetsMutex       sync.RWMutex
	targetsArgsForCall []struct {
		arg1 string
	}
	targetsReturns struct {
		result1 v1.TargetInterface
	}
	targetsReturnsOnCall map[int]struct {
		result1 v1.TargetInterface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BackupV1Interface) RESTClient() rest.Interface {
	fake.rESTClientMutex.Lock()
	ret, specificReturn := fake.rESTClientReturnsOnCall[len(fake.rESTClientArgsForCall)]
	fake.rESTClientArgsForCall = append(fake.rESTClientArgsForCall, struct {
	}{})
	stub := fake.RESTClientStub
	fakeReturns := fake.rESTClientReturns
	fake.recordInvocation("RESTClient", []interface{}{})
	fake.rESTClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BackupV1Interface) RESTClientCallCount() int {
	fake.rESTClientMutex.RLock()
	defer fake.rESTClientMutex.RUnlock()
	return len(fake.rESTClientArgsForCall)
}

func (fake *BackupV1Interface) RESTClientCalls(stub func() rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = stub
}

func (fake *BackupV1Interface) RESTClientReturns(result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	fake.rESTClientReturns = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *BackupV1Interface) RESTClientReturnsOnCall(i int, result1 rest.Interface) {
	fake.rESTClientMutex.Lock()
	defer fake.rESTClientMutex.Unlock()
	fake.RESTClientStub = nil
	if fake.rESTClientReturnsOnCall == nil {
		fake.rESTClientReturnsOnCall = make(map[int]struct {
			result1 rest.Interface
		})
	}
	fake.rESTClientReturnsOnCall[i] = struct {
		result1 rest.Interface
	}{result1}
}

func (fake *BackupV1Interface) Targets(arg1 string) v1.TargetInterface {
	fake.targetsMutex.Lock()
	ret, specificReturn := fake.targetsReturnsOnCall[len(fake.targetsArgsForCall)]
	fake.targetsArgsForCall = append(fake.targetsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TargetsStub
	fakeReturns := fake.targetsReturns
	fake.recordInvocation("Targets", []interface{}{arg1})
	fake.targetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *BackupV1Interface) TargetsCallCount() int {
	fake.targetsMutex.RLock()
	defer fake.targetsMutex.RUnlock()
	return len(fake.targetsArgsForCall)
}

func (fake *BackupV1Interface) TargetsCalls(stub func(string) v1.TargetInterface) {
	fake.targetsMutex.Lock()
	defer fake.targetsMutex.Unlock()
	fake.TargetsStub = stub
}

func (fake *BackupV1Interface) TargetsArgsForCall(i int) string {
	fake.targetsMutex.RLock()
	defer fake.targetsMutex.RUnlock()
	argsForCall := fake.targetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *BackupV1Interface) TargetsReturns(result1 v1.TargetInterface) {
	fake.targetsMutex.Lock()
	defer fake.targetsMutex.Unlock()
	fake.TargetsStub = nil
	fake.targetsReturns = struct {
		result1 v1.TargetInterface
	}{result1}
}

func (fake *BackupV1Interface) TargetsReturnsOnCall(i int, result1 v1.TargetInterface) {
	fake.targetsMutex.Lock()
	defer fake.targetsMutex.Unlock()
	fake.TargetsStub = nil
	if fake.targetsReturnsOnCall == nil {
		fake.targetsReturnsOnCall = make(map[int]struct {
			result1 v1.TargetInterface
		})
	}
	fake.targetsReturnsOnCall[i] = struct {
		result1 v1.TargetInterface
	}{result1}
}

func (fake *BackupV1Interface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *BackupV1Interface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.BackupV1Interface = new(BackupV1Interface)
