// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/backup/pkg"
)

type RsyncExecutor struct {
	RsyncStub        func(context.Context, ...string) error
	rsyncMutex       sync.RWMutex
	rsyncArgsForCall []struct {
		arg1 context.Context
		arg2 []string
	}
	rsyncReturns struct {
		result1 error
	}
	rsyncReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *RsyncExecutor) Rsync(arg1 context.Context, arg2 ...string) error {
	fake.rsyncMutex.Lock()
	ret, specificReturn := fake.rsyncReturnsOnCall[len(fake.rsyncArgsForCall)]
	fake.rsyncArgsForCall = append(fake.rsyncArgsForCall, struct {
		arg1 context.Context
		arg2 []string
	}{arg1, arg2})
	stub := fake.RsyncStub
	fakeReturns := fake.rsyncReturns
	fake.recordInvocation("Rsync", []interface{}{arg1, arg2})
	fake.rsyncMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *RsyncExecutor) RsyncCallCount() int {
	fake.rsyncMutex.RLock()
	defer fake.rsyncMutex.RUnlock()
	return len(fake.rsyncArgsForCall)
}

func (fake *RsyncExecutor) RsyncCalls(stub func(context.Context, ...string) error) {
	fake.rsyncMutex.Lock()
	defer fake.rsyncMutex.Unlock()
	fake.RsyncStub = stub
}

func (fake *RsyncExecutor) RsyncArgsForCall(i int) (context.Context, []string) {
	fake.rsyncMutex.RLock()
	defer fake.rsyncMutex.RUnlock()
	argsForCall := fake.rsyncArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *RsyncExecutor) RsyncReturns(result1 error) {
	fake.rsyncMutex.Lock()
	defer fake.rsyncMutex.Unlock()
	fake.RsyncStub = nil
	fake.rsyncReturns = struct {
		result1 error
	}{result1}
}

func (fake *RsyncExecutor) RsyncReturnsOnCall(i int, result1 error) {
	fake.rsyncMutex.Lock()
	defer fake.rsyncMutex.Unlock()
	fake.RsyncStub = nil
	if fake.rsyncReturnsOnCall == nil {
		fake.rsyncReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rsyncReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *RsyncExecutor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *RsyncExecutor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.RsyncExectuor = new(RsyncExecutor)
