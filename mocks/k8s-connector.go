// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	v1 "github.com/bborbe/backup/k8s/apis/backup.benjamin-borbe.de/v1"
	"github.com/bborbe/backup/pkg"
	"k8s.io/client-go/tools/cache"
)

type K8sConnector struct {
	ListenStub        func(context.Context, cache.ResourceEventHandler) error
	listenMutex       sync.RWMutex
	listenArgsForCall []struct {
		arg1 context.Context
		arg2 cache.ResourceEventHandler
	}
	listenReturns struct {
		result1 error
	}
	listenReturnsOnCall map[int]struct {
		result1 error
	}
	SetupCustomResourceDefinitionStub        func(context.Context) error
	setupCustomResourceDefinitionMutex       sync.RWMutex
	setupCustomResourceDefinitionArgsForCall []struct {
		arg1 context.Context
	}
	setupCustomResourceDefinitionReturns struct {
		result1 error
	}
	setupCustomResourceDefinitionReturnsOnCall map[int]struct {
		result1 error
	}
	TargetStub        func(context.Context, string) (*v1.Target, error)
	targetMutex       sync.RWMutex
	targetArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	targetReturns struct {
		result1 *v1.Target
		result2 error
	}
	targetReturnsOnCall map[int]struct {
		result1 *v1.Target
		result2 error
	}
	TargetsStub        func(context.Context) (v1.Targets, error)
	targetsMutex       sync.RWMutex
	targetsArgsForCall []struct {
		arg1 context.Context
	}
	targetsReturns struct {
		result1 v1.Targets
		result2 error
	}
	targetsReturnsOnCall map[int]struct {
		result1 v1.Targets
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *K8sConnector) Listen(arg1 context.Context, arg2 cache.ResourceEventHandler) error {
	fake.listenMutex.Lock()
	ret, specificReturn := fake.listenReturnsOnCall[len(fake.listenArgsForCall)]
	fake.listenArgsForCall = append(fake.listenArgsForCall, struct {
		arg1 context.Context
		arg2 cache.ResourceEventHandler
	}{arg1, arg2})
	stub := fake.ListenStub
	fakeReturns := fake.listenReturns
	fake.recordInvocation("Listen", []interface{}{arg1, arg2})
	fake.listenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sConnector) ListenCallCount() int {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return len(fake.listenArgsForCall)
}

func (fake *K8sConnector) ListenCalls(stub func(context.Context, cache.ResourceEventHandler) error) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = stub
}

func (fake *K8sConnector) ListenArgsForCall(i int) (context.Context, cache.ResourceEventHandler) {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	argsForCall := fake.listenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sConnector) ListenReturns(result1 error) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = nil
	fake.listenReturns = struct {
		result1 error
	}{result1}
}

func (fake *K8sConnector) ListenReturnsOnCall(i int, result1 error) {
	fake.listenMutex.Lock()
	defer fake.listenMutex.Unlock()
	fake.ListenStub = nil
	if fake.listenReturnsOnCall == nil {
		fake.listenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *K8sConnector) SetupCustomResourceDefinition(arg1 context.Context) error {
	fake.setupCustomResourceDefinitionMutex.Lock()
	ret, specificReturn := fake.setupCustomResourceDefinitionReturnsOnCall[len(fake.setupCustomResourceDefinitionArgsForCall)]
	fake.setupCustomResourceDefinitionArgsForCall = append(fake.setupCustomResourceDefinitionArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.SetupCustomResourceDefinitionStub
	fakeReturns := fake.setupCustomResourceDefinitionReturns
	fake.recordInvocation("SetupCustomResourceDefinition", []interface{}{arg1})
	fake.setupCustomResourceDefinitionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *K8sConnector) SetupCustomResourceDefinitionCallCount() int {
	fake.setupCustomResourceDefinitionMutex.RLock()
	defer fake.setupCustomResourceDefinitionMutex.RUnlock()
	return len(fake.setupCustomResourceDefinitionArgsForCall)
}

func (fake *K8sConnector) SetupCustomResourceDefinitionCalls(stub func(context.Context) error) {
	fake.setupCustomResourceDefinitionMutex.Lock()
	defer fake.setupCustomResourceDefinitionMutex.Unlock()
	fake.SetupCustomResourceDefinitionStub = stub
}

func (fake *K8sConnector) SetupCustomResourceDefinitionArgsForCall(i int) context.Context {
	fake.setupCustomResourceDefinitionMutex.RLock()
	defer fake.setupCustomResourceDefinitionMutex.RUnlock()
	argsForCall := fake.setupCustomResourceDefinitionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sConnector) SetupCustomResourceDefinitionReturns(result1 error) {
	fake.setupCustomResourceDefinitionMutex.Lock()
	defer fake.setupCustomResourceDefinitionMutex.Unlock()
	fake.SetupCustomResourceDefinitionStub = nil
	fake.setupCustomResourceDefinitionReturns = struct {
		result1 error
	}{result1}
}

func (fake *K8sConnector) SetupCustomResourceDefinitionReturnsOnCall(i int, result1 error) {
	fake.setupCustomResourceDefinitionMutex.Lock()
	defer fake.setupCustomResourceDefinitionMutex.Unlock()
	fake.SetupCustomResourceDefinitionStub = nil
	if fake.setupCustomResourceDefinitionReturnsOnCall == nil {
		fake.setupCustomResourceDefinitionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setupCustomResourceDefinitionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *K8sConnector) Target(arg1 context.Context, arg2 string) (*v1.Target, error) {
	fake.targetMutex.Lock()
	ret, specificReturn := fake.targetReturnsOnCall[len(fake.targetArgsForCall)]
	fake.targetArgsForCall = append(fake.targetArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.TargetStub
	fakeReturns := fake.targetReturns
	fake.recordInvocation("Target", []interface{}{arg1, arg2})
	fake.targetMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sConnector) TargetCallCount() int {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	return len(fake.targetArgsForCall)
}

func (fake *K8sConnector) TargetCalls(stub func(context.Context, string) (*v1.Target, error)) {
	fake.targetMutex.Lock()
	defer fake.targetMutex.Unlock()
	fake.TargetStub = stub
}

func (fake *K8sConnector) TargetArgsForCall(i int) (context.Context, string) {
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	argsForCall := fake.targetArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *K8sConnector) TargetReturns(result1 *v1.Target, result2 error) {
	fake.targetMutex.Lock()
	defer fake.targetMutex.Unlock()
	fake.TargetStub = nil
	fake.targetReturns = struct {
		result1 *v1.Target
		result2 error
	}{result1, result2}
}

func (fake *K8sConnector) TargetReturnsOnCall(i int, result1 *v1.Target, result2 error) {
	fake.targetMutex.Lock()
	defer fake.targetMutex.Unlock()
	fake.TargetStub = nil
	if fake.targetReturnsOnCall == nil {
		fake.targetReturnsOnCall = make(map[int]struct {
			result1 *v1.Target
			result2 error
		})
	}
	fake.targetReturnsOnCall[i] = struct {
		result1 *v1.Target
		result2 error
	}{result1, result2}
}

func (fake *K8sConnector) Targets(arg1 context.Context) (v1.Targets, error) {
	fake.targetsMutex.Lock()
	ret, specificReturn := fake.targetsReturnsOnCall[len(fake.targetsArgsForCall)]
	fake.targetsArgsForCall = append(fake.targetsArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.TargetsStub
	fakeReturns := fake.targetsReturns
	fake.recordInvocation("Targets", []interface{}{arg1})
	fake.targetsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *K8sConnector) TargetsCallCount() int {
	fake.targetsMutex.RLock()
	defer fake.targetsMutex.RUnlock()
	return len(fake.targetsArgsForCall)
}

func (fake *K8sConnector) TargetsCalls(stub func(context.Context) (v1.Targets, error)) {
	fake.targetsMutex.Lock()
	defer fake.targetsMutex.Unlock()
	fake.TargetsStub = stub
}

func (fake *K8sConnector) TargetsArgsForCall(i int) context.Context {
	fake.targetsMutex.RLock()
	defer fake.targetsMutex.RUnlock()
	argsForCall := fake.targetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *K8sConnector) TargetsReturns(result1 v1.Targets, result2 error) {
	fake.targetsMutex.Lock()
	defer fake.targetsMutex.Unlock()
	fake.TargetsStub = nil
	fake.targetsReturns = struct {
		result1 v1.Targets
		result2 error
	}{result1, result2}
}

func (fake *K8sConnector) TargetsReturnsOnCall(i int, result1 v1.Targets, result2 error) {
	fake.targetsMutex.Lock()
	defer fake.targetsMutex.Unlock()
	fake.TargetsStub = nil
	if fake.targetsReturnsOnCall == nil {
		fake.targetsReturnsOnCall = make(map[int]struct {
			result1 v1.Targets
			result2 error
		})
	}
	fake.targetsReturnsOnCall[i] = struct {
		result1 v1.Targets
		result2 error
	}{result1, result2}
}

func (fake *K8sConnector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	fake.setupCustomResourceDefinitionMutex.RLock()
	defer fake.setupCustomResourceDefinitionMutex.RUnlock()
	fake.targetMutex.RLock()
	defer fake.targetMutex.RUnlock()
	fake.targetsMutex.RLock()
	defer fake.targetsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *K8sConnector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.K8sConnector = new(K8sConnector)
