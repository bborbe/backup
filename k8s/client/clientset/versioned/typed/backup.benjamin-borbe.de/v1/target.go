// Copyright (c) 2025 Benjamin Borbe All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	backupbenjaminborbedev1 "github.com/bborbe/backup/k8s/apis/backup.benjamin-borbe.de/v1"
	applyconfigurationbackupbenjaminborbedev1 "github.com/bborbe/backup/k8s/client/applyconfiguration/backup.benjamin-borbe.de/v1"
	scheme "github.com/bborbe/backup/k8s/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// TargetsGetter has a method to return a TargetInterface.
// A group's client should implement this interface.
type TargetsGetter interface {
	Targets(namespace string) TargetInterface
}

// TargetInterface has methods to work with Target resources.
type TargetInterface interface {
	Create(ctx context.Context, target *backupbenjaminborbedev1.Target, opts metav1.CreateOptions) (*backupbenjaminborbedev1.Target, error)
	Update(ctx context.Context, target *backupbenjaminborbedev1.Target, opts metav1.UpdateOptions) (*backupbenjaminborbedev1.Target, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*backupbenjaminborbedev1.Target, error)
	List(ctx context.Context, opts metav1.ListOptions) (*backupbenjaminborbedev1.TargetList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *backupbenjaminborbedev1.Target, err error)
	Apply(ctx context.Context, target *applyconfigurationbackupbenjaminborbedev1.TargetApplyConfiguration, opts metav1.ApplyOptions) (result *backupbenjaminborbedev1.Target, err error)
	TargetExpansion
}

// targets implements TargetInterface
type targets struct {
	*gentype.ClientWithListAndApply[*backupbenjaminborbedev1.Target, *backupbenjaminborbedev1.TargetList, *applyconfigurationbackupbenjaminborbedev1.TargetApplyConfiguration]
}

// newTargets returns a Targets
func newTargets(c *BackupV1Client, namespace string) *targets {
	return &targets{
		gentype.NewClientWithListAndApply[*backupbenjaminborbedev1.Target, *backupbenjaminborbedev1.TargetList, *applyconfigurationbackupbenjaminborbedev1.TargetApplyConfiguration](
			"targets",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *backupbenjaminborbedev1.Target { return &backupbenjaminborbedev1.Target{} },
			func() *backupbenjaminborbedev1.TargetList { return &backupbenjaminborbedev1.TargetList{} },
		),
	}
}
