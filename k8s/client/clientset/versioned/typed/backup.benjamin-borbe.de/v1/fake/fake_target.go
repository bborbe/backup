// Copyright (c) 2025 Benjamin Borbe All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/bborbe/backup/k8s/apis/backup.benjamin-borbe.de/v1"
	backupbenjaminborbedev1 "github.com/bborbe/backup/k8s/client/applyconfiguration/backup.benjamin-borbe.de/v1"
	typedbackupbenjaminborbedev1 "github.com/bborbe/backup/k8s/client/clientset/versioned/typed/backup.benjamin-borbe.de/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeTargets implements TargetInterface
type fakeTargets struct {
	*gentype.FakeClientWithListAndApply[*v1.Target, *v1.TargetList, *backupbenjaminborbedev1.TargetApplyConfiguration]
	Fake *FakeBackupV1
}

func newFakeTargets(fake *FakeBackupV1, namespace string) typedbackupbenjaminborbedev1.TargetInterface {
	return &fakeTargets{
		gentype.NewFakeClientWithListAndApply[*v1.Target, *v1.TargetList, *backupbenjaminborbedev1.TargetApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("targets"),
			v1.SchemeGroupVersion.WithKind("Target"),
			func() *v1.Target { return &v1.Target{} },
			func() *v1.TargetList { return &v1.TargetList{} },
			func(dst, src *v1.TargetList) { dst.ListMeta = src.ListMeta },
			func(list *v1.TargetList) []*v1.Target { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.TargetList, items []*v1.Target) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
